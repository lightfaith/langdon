#!/usr/bin/python3
"""
https://github.com/james727/MTP/blob/master/mersenne_twister.py

https://en.wikipedia.org/wiki/Diehard_tests
http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/mt19937-64.out.txt
"""
import sys

try:
    mode = sys.argv[1]
    count = int(sys.argv[2])
    try:
        seed = int(sys.argv[3])
    except:
        seed = 0
except:
    print('[-] Usage: %s int32|float <count> <seed>' % sys.argv[0])
    sys.exit(1)


class MersenneTwister:
    def __init__(self, seed):
        # TODO rewrite to 64b
        self.size = 624
        self.state = [0] * self.size
        self.f = 1812433253
        self.m = 397
        self.u = 11
        self.s = 7
        self.b = 0x9D2C5680
        self.t = 15
        self.c = 0xEFC60000
        self.l = 18
        self.lower_mask = (1 << 31)-1
        self.upper_mask = 1 << 31
        self.state[0] = seed
        self.index = self.size
        for i in range(1, self.size):
            self.state[i] = self.int_32(self.f 
                                        * (self.state[i-1] 
                                           ^ (self.state[i-1] >> 30))
                                        + i)
    
    def int_32(self, number):
        return int(number & 0xffffffff)

    def twist(self):
        for i in range(self.size):
            temp = self.int_32((self.state[i] & self.upper_mask)
                               + (self.state[(i+1) % self.size] 
                                  & self.lower_mask))
            temp_shift = temp >> 1
            if temp % 2 != 0:
                temp_shift = temp_shift ^ 0x9908b0df
            self.state[i] = self.state[(i + self.m) % self.size] ^ temp_shift
        self.index = 0

    def get_random_number(self):
        if self.index >= 624:
            self.twist()
        y = self.state[self.index]
        y = y ^ (y >> self.u)
        y = y ^ ((y << self.s) & self.b)
        y = y ^ ((y << self.t) & self.c)
        y = y ^ (y >> self.l)
        self.index += 1
        return y

    def randint32(self):
        return self.int_32(self.get_random_number())
    
    def randfloat(self):
        # TODO from 64b
        return self.randint32() /0xffffffff

mt = MersenneTwister(seed)
for i in range(count):
    if mode == 'int32':
        print(mt.randint32())
    elif mode == 'float':
        print(mt.randfloat())
    else:
        print('[-] Invalid mode.')
